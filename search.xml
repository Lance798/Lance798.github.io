<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《FPGA研究筆記 三》 LCD模組 8位元驅動</title>
    <url>/2020/11/18/LCM-8%E4%BD%8D%E5%85%83%E9%A9%85%E5%8B%95/</url>
    <content><![CDATA[<h1 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h1><p>使用FPGA，透過8bit傳輸介面來驅動LCD模組。</p>
<h1 id="相關知識"><a href="#相關知識" class="headerlink" title="相關知識"></a>相關知識</h1><h2 id="LCD模組"><a href="#LCD模組" class="headerlink" title="LCD模組"></a>LCD模組</h2><p>KTM-626上安裝的LCD型號是WG14432B5，可以顯示中文字，為繪圖型LCD。<br>寬度144畫素、高度32畫素。</p>
<h3 id="名詞說明"><a href="#名詞說明" class="headerlink" title="名詞說明"></a>名詞說明</h3><ul>
<li><strong>AC</strong> 位址計數</li>
<li><strong>BF</strong> 忙碌旗標</li>
<li><strong>DDRAM</strong> 顯示資料暫存器</li>
<li><strong>CGRAM</strong> 自定義字型暫存器 </li>
<li><strong>HCGROM</strong> 半寬字型記憶體(ASCII) </li>
<li><strong>CGROM</strong> 中文字型記憶體(BIG-5)</li>
</ul>
<a id="more"></a>

<h3 id="重要接腳說明"><a href="#重要接腳說明" class="headerlink" title="重要接腳說明"></a>重要接腳說明</h3><p><img src="LCD_pinout.png" alt="LCD 接腳圖"></p>
<ol>
<li><strong>RS</strong>  暫存器選擇 和 <strong>RW</strong> 讀/寫控制選擇<table>
<thead>
<tr>
<th align="center">RS</th>
<th align="center">RW</th>
<th align="center">簡介</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">寫入指令碼於指令暫存器。</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">讀取BF(忙碌旗標)和AC(位址計數器)的內容。</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">將資料寫入DDRAM(資料暫存器)。</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">從DDRAM讀取資料。</td>
</tr>
</tbody></table>
</li>
<li><strong>EN</strong> LCD致能接腳 <br> 輸入一正脈波(<strong>0 -&gt; 1 -&gt; 0</strong>)即可完成寫入資料。</li>
<li><strong>D0 ~ D7</strong> 資料匯流排<br> 輸入指令碼</li>
</ol>
<h3 id="控制指令表"><a href="#控制指令表" class="headerlink" title="控制指令表"></a>控制指令表</h3><ul>
<li>基本指令(RE=0)</li>
</ul>
<img src="基本指令.png" alt="基本指令" style="zoom: 67%;" />

<ul>
<li>進階指令(RE=1)</li>
</ul>
<img src="延伸指令.png" alt="延伸指令" style="zoom:73%;" />

<h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><p><img src="InitChart.png" alt="初始化流程圖"></p>
<h1 id="設計架構"><a href="#設計架構" class="headerlink" title="設計架構"></a>設計架構</h1><h2 id="LCM-8位元控制器"><a href="#LCM-8位元控制器" class="headerlink" title="LCM 8位元控制器"></a>LCM 8位元控制器</h2><ul>
<li><h3 id="接腳圖"><a href="#接腳圖" class="headerlink" title="接腳圖"></a><strong>接腳圖</strong></h3><p><img src="LCM%E6%8E%A7%E5%88%B6%E5%99%A8%E6%8E%A5%E8%85%B3%E5%9C%96.png" alt="LCM控制器接腳圖"></p>
<ul>
<li><p><strong>inLCM_CLK</strong></p>
<p><strong>時脈輸入</strong>(50MHz)</p>
</li>
<li><p><strong>inLCM_RESET</strong></p>
<p><strong>重置</strong>輸入</p>
</li>
<li><p><strong>inLCM_DB[7..0]</strong></p>
<p>字元編碼/指令碼輸入</p>
</li>
<li><p><strong>Action[1..0]</strong></p>
<p>控制動作</p>
<p>Action=0：執行初始化</p>
<p>Action=1：將inLCM_DB的字元編碼輸入DDRAM</p>
<p>Action=2：執行inLCM_DB的指令碼</p>
</li>
<li><p><strong>outLCM_EN</strong></p>
<p>LCM致能輸出</p>
</li>
<li><p><strong>outLCM_RW</strong></p>
<p>LCM讀/寫控制選擇RW輸出</p>
</li>
<li><p><strong>outLCM_RS</strong></p>
<p>LCM暫存器選擇RS輸出</p>
</li>
<li><p><strong>outLCM_DB[7..0]</strong></p>
<p>Data Bus輸出</p>
</li>
<li><p><strong>outLCM_isDone</strong></p>
<p>輸出結束isDone=1，否則為0</p>
</li>
</ul>
</li>
<li><h3 id="執行指令碼-輸入字元"><a href="#執行指令碼-輸入字元" class="headerlink" title="執行指令碼/輸入字元"></a><strong>執行指令碼/輸入字元</strong></h3><ul>
<li>傳輸指令流程圖</li>
</ul>
<p><img src="%E5%82%B3%E8%BC%B8%E6%8C%87%E4%BB%A4%E6%B5%81%E7%A8%8B.png" alt="傳輸指令流程"></p>
<ul>
<li>部分程式碼</li>
</ul>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> CurrentState <span class="keyword">is</span></span><br><span class="line">    <span class="keyword">when</span> S0 =&gt;</span><br><span class="line">        waitTime := CMD(i).waitTime;</span><br><span class="line">        CurrentState &lt;= S1;</span><br><span class="line">        outLCM_DB &lt;= CMD(i).cmd;</span><br><span class="line">        outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> S1 =&gt;</span><br><span class="line">        CurrentState &lt;= S2;</span><br><span class="line">        outLCM_DB &lt;= CMD(i).cmd;</span><br><span class="line">        outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        outLCM_EN &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> S2 =&gt;</span><br><span class="line">        CurrentState &lt;= IDLE;</span><br><span class="line">        outLCM_DB &lt;= CMD(i).cmd;</span><br><span class="line">        outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        outLCM_isDone &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">when</span> <span class="keyword">others</span> =&gt;</span><br><span class="line">        CurrentState &lt;= IDLE;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>這是我第一次用LCD而不使用I2C的傳輸方式，而且還不是用寫程式的方式，最後快完成的時候還因為我時脈的腳位設錯，但幸好最後有發現。</p>
<h1 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h1><ul>
<li><p>LCM_TEST.vhd</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> LCM_TEST <span class="keyword">is</span></span><br><span class="line">	<span class="keyword">port</span>(CLK, RESET: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">		 LCM_RS, LCM_RW, LCM_EN: <span class="keyword">out</span> <span class="built_in">std_logic</span>;</span><br><span class="line">		 LCM_DB: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">		 Test: <span class="keyword">buffer</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> LCM_TEST;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> arch <span class="keyword">of</span> LCM_TEST <span class="keyword">is</span></span><br><span class="line">	<span class="keyword">component</span> LCM_8bit_Driver </span><br><span class="line">   <span class="keyword">port</span>(inLCM_CLK, inLCM_RESET: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">        inLCM_DB: <span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">        Action: <span class="keyword">in</span> <span class="built_in">integer</span> <span class="keyword">range</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">2</span>; <span class="comment">-- 0: begin 1:write char 2: read</span></span><br><span class="line">        outLCM_EN, outLCM_RW, outLCM_RS: <span class="keyword">out</span> <span class="built_in">std_logic</span>;</span><br><span class="line">        outLCM_DB: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">        outLCM_isDone: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">component</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">signal</span> Driver_RESET: <span class="built_in">std_logic</span> := <span class="string">&#x27;1&#x27;</span>;	</span><br><span class="line">	<span class="keyword">signal</span> Driver_Action: <span class="built_in">integer</span> := <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">signal</span> Driver_DB_in: <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">signal</span> Driver_DB_out: <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">signal</span> Driver_isDone: <span class="built_in">std_logic</span>;</span><br><span class="line">	<span class="keyword">signal</span> Driver_EN, Driver_RW, Driver_RS: <span class="built_in">std_logic</span>;</span><br><span class="line">    <span class="keyword">type</span> States <span class="keyword">is</span>(START, SETUP, printL1_1, printL1_2, nextLine_1, nextLine_2, 						   printL2_1, printL2_2, IDLE);</span><br><span class="line">	<span class="keyword">signal</span> CurrentState: States;</span><br><span class="line">	<span class="keyword">type</span> Fonts <span class="keyword">is</span> <span class="keyword">array</span> (<span class="number">0</span> <span class="keyword">to</span> <span class="number">31</span>) <span class="keyword">of</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">constant</span> Font_L1: Fonts :=(x<span class="string">&quot;B3&quot;</span>, x<span class="string">&quot;E1&quot;</span>, x<span class="string">&quot;AD&quot;</span>, x<span class="string">&quot;43&quot;</span>, x<span class="string">&quot;A1&quot;</span>, x<span class="string">&quot;49&quot;</span>, <span class="keyword">others</span>=&gt;x<span class="string">&quot;00&quot;</span>); <span class="comment">-- 喔耶!</span></span><br><span class="line">	<span class="keyword">constant</span> Font_L2: Fonts :=(x<span class="string">&quot;B2&quot;</span>, x<span class="string">&quot;D7&quot;</span>, x<span class="string">&quot;A9&quot;</span>, x<span class="string">&quot;F3&quot;</span>, x<span class="string">&quot;A6&quot;</span>, x<span class="string">&quot;A8&quot;</span>, x<span class="string">&quot;A5&quot;</span>, x<span class="string">&quot;5C&quot;</span>, x<span class="string">&quot;A4&quot;</span>, x<span class="string">&quot;46&quot;</span>, x<span class="string">&quot;A1&quot;</span>, x<span class="string">&quot;E3&quot;</span>, <span class="keyword">others</span>=&gt;x<span class="string">&quot;00&quot;</span>); <span class="comment">-- 終於成功了</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	LCM_Driver: LCM_8bit_Driver <span class="keyword">port</span> <span class="keyword">map</span>(CLK, Driver_RESET, Driver_DB_in, Driver_Action, Driver_EN, Driver_RW, Driver_RS, Driver_DB_out, Driver_isDone);</span><br><span class="line">	LCM_RS &lt;= Driver_RS;</span><br><span class="line">	LCM_RW &lt;= Driver_RW;</span><br><span class="line">	LCM_EN &lt;= Driver_EN;</span><br><span class="line">	LCM_DB &lt;= Driver_DB_out;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">process</span>(CLK, RESET)</span><br><span class="line">	<span class="keyword">variable</span> counter: <span class="built_in">integer</span> <span class="keyword">range</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">32</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> RESET = <span class="string">&#x27;0&#x27;</span> <span class="keyword">then</span></span><br><span class="line">		CurrentState &lt;= START;</span><br><span class="line">		Test &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">		Driver_RESET &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		Driver_Action &lt;= <span class="number">0</span>;</span><br><span class="line">		counter := <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">elsif</span> rising_edge(CLK) <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">case</span> CurrentState <span class="keyword">is</span></span><br><span class="line">			<span class="keyword">when</span> START =&gt;</span><br><span class="line">				CurrentState &lt;= SETUP;</span><br><span class="line">				Driver_Action &lt;= <span class="number">0</span>;</span><br><span class="line">				Driver_RESET &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">			<span class="keyword">when</span> SETUP =&gt;</span><br><span class="line">				<span class="keyword">if</span> Driver_isDone = <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">					CurrentState &lt;= printL1_1;</span><br><span class="line">					Driver_RESET &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					CurrentState &lt;= SETUP;</span><br><span class="line">				<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">			<span class="keyword">when</span> printL1_1 =&gt; <span class="comment">-- WRITE Line 1</span></span><br><span class="line">				CurrentState &lt;= printL1_2;</span><br><span class="line">				Driver_DB_in &lt;= Font_L1(counter); <span class="comment">-- font1(counter);</span></span><br><span class="line">				Driver_Action &lt;= <span class="number">1</span>;</span><br><span class="line">				Driver_RESET &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">			<span class="keyword">when</span> printL1_2 =&gt;</span><br><span class="line">				<span class="keyword">if</span> Driver_isDone = <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">					<span class="keyword">if</span> counter = <span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">						CurrentState &lt;= nextLine_1;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						CurrentState &lt;= printL1_1;</span><br><span class="line">					<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">					Driver_Action &lt;= <span class="number">1</span>;</span><br><span class="line">					Driver_RESET &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">					counter := counter + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					CurrentState &lt;= printL1_2;</span><br><span class="line">				<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">			<span class="keyword">when</span> nextLine_1 =&gt; <span class="comment">-- second line</span></span><br><span class="line">				CurrentState &lt;= nextLine_2;</span><br><span class="line">				Driver_RESET &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">				Driver_Action &lt;= <span class="number">2</span>;</span><br><span class="line">				Driver_DB_in &lt;= <span class="string">&quot;10010000&quot;</span>; <span class="comment">-- next line</span></span><br><span class="line">				counter := <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">when</span> nextLine_2 =&gt;</span><br><span class="line">				<span class="keyword">if</span> Driver_isDone = <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">					CurrentState &lt;= printL2_1;</span><br><span class="line">					Driver_Action &lt;= <span class="number">1</span>;</span><br><span class="line">					Driver_RESET &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					CurrentState &lt;= nextLine_2;</span><br><span class="line">				<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">			<span class="keyword">when</span> printL2_1 =&gt; <span class="comment">-- WRITE &#x27;P&#x27;</span></span><br><span class="line">				CurrentState &lt;= printL2_2;</span><br><span class="line">				Driver_DB_in &lt;= Font_L2(counter); <span class="comment">-- font1(counter);</span></span><br><span class="line">				Driver_Action &lt;= <span class="number">1</span>;</span><br><span class="line">				Driver_RESET &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">			<span class="keyword">when</span> printL2_2 =&gt;</span><br><span class="line">				<span class="keyword">if</span> Driver_isDone = <span class="string">&#x27;1&#x27;</span> <span class="keyword">then</span></span><br><span class="line">					<span class="keyword">if</span> counter = <span class="number">12</span> <span class="keyword">then</span></span><br><span class="line">						CurrentState &lt;= IDLE;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						CurrentState &lt;= printL2_1;</span><br><span class="line">					<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">					Driver_Action &lt;= <span class="number">1</span>;</span><br><span class="line">					Driver_RESET &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">					counter := counter + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					CurrentState &lt;= printL2_2;</span><br><span class="line">				<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">			<span class="keyword">when</span> <span class="keyword">others</span> =&gt;</span><br><span class="line">				CurrentState &lt;= IDLE;</span><br><span class="line">		<span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span> ; <span class="comment">-- </span></span><br><span class="line"><span class="keyword">end</span> arch ; <span class="comment">-- arch</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>LCM_8bit_Driver.vhd</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span> ieee;</span><br><span class="line"><span class="keyword">use</span> ieee.std_logic_1164.<span class="keyword">all</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">entity</span> LCM_8bit_Driver <span class="keyword">is</span></span><br><span class="line">	<span class="keyword">port</span>(inLCM_CLK, inLCM_RESET: <span class="keyword">in</span> <span class="built_in">std_logic</span>;</span><br><span class="line">		  inLCM_DB: <span class="keyword">in</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">		  Action: <span class="keyword">in</span> <span class="built_in">integer</span> <span class="keyword">range</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">2</span>; <span class="comment">-- 0: begin 1: write char 2: send command</span></span><br><span class="line">		  outLCM_EN, outLCM_RW, outLCM_RS: <span class="keyword">out</span> <span class="built_in">std_logic</span>;</span><br><span class="line">		  outLCM_DB: <span class="keyword">out</span> <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">		  outLCM_isDone: <span class="keyword">out</span> <span class="built_in">std_logic</span>);</span><br><span class="line"><span class="keyword">end</span> LCM_8bit_Driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">architecture</span> arch <span class="keyword">of</span> LCM_8bit_Driver <span class="keyword">is</span> </span><br><span class="line">	<span class="keyword">type</span> States <span class="keyword">is</span>(S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21, S22, S23, IDLE);</span><br><span class="line">	<span class="keyword">type</span> command <span class="keyword">is</span> <span class="keyword">record</span></span><br><span class="line">		cmd: <span class="built_in">std_logic_vector</span>(<span class="number">7</span> <span class="keyword">downto</span> <span class="number">0</span>);</span><br><span class="line">		waitTime: <span class="built_in">integer</span> <span class="keyword">range</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">750000</span>;</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">record</span>;</span><br><span class="line">	<span class="keyword">type</span> ArrCmd <span class="keyword">is</span> <span class="keyword">array</span>(<span class="number">0</span> <span class="keyword">to</span> <span class="number">5</span>) <span class="keyword">of</span> command;</span><br><span class="line">	<span class="keyword">signal</span> CurrentState: States;</span><br><span class="line">	<span class="keyword">constant</span> InitCmd: ArrCmd := ((x<span class="string">&quot;38&quot;</span>, <span class="number">205000</span>), (x<span class="string">&quot;30&quot;</span>, <span class="number">205000</span>), (x<span class="string">&quot;04&quot;</span>, <span class="number">200000</span>),</span><br><span class="line">								 (x<span class="string">&quot;01&quot;</span>, <span class="number">200000</span>), (x<span class="string">&quot;06&quot;</span>, <span class="number">200000</span>), (x<span class="string">&quot;0C&quot;</span>, <span class="number">200000</span>));</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">process</span>(inLCM_CLK, inLCM_RESET)</span><br><span class="line">	<span class="keyword">variable</span> cnt: <span class="built_in">integer</span> <span class="keyword">range</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">750000</span>;</span><br><span class="line">	<span class="keyword">variable</span> waitTime: <span class="built_in">integer</span> <span class="keyword">range</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">750000</span>;</span><br><span class="line">	<span class="keyword">variable</span> ptr: <span class="built_in">integer</span> <span class="keyword">range</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">6</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">if</span> inLCM_RESET = <span class="string">&#x27;0&#x27;</span> <span class="keyword">then</span></span><br><span class="line">		<span class="keyword">if</span> Action = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">			waitTime := <span class="number">750000</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			waitTime := <span class="number">80000</span>;</span><br><span class="line">		<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">		outLCM_isDone &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		CurrentState &lt;= S0;</span><br><span class="line">		ptr := <span class="number">0</span>;</span><br><span class="line">		cnt := <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">elsif</span> rising_edge(inLCM_CLK) <span class="keyword">then</span></span><br><span class="line">		cnt := cnt + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> cnt = waitTime <span class="keyword">then</span></span><br><span class="line">			cnt := <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">case</span> Action <span class="keyword">is</span></span><br><span class="line">				<span class="keyword">when</span> <span class="number">0</span> =&gt;</span><br><span class="line">					<span class="keyword">case</span> CurrentState <span class="keyword">is</span></span><br><span class="line">						<span class="keyword">when</span> S0 =&gt; <span class="comment">-- Init</span></span><br><span class="line">							<span class="keyword">if</span> ptr = <span class="number">6</span> <span class="keyword">then</span></span><br><span class="line">								CurrentState &lt;= IDLE;</span><br><span class="line">								outLCM_isDone &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">							<span class="keyword">else</span></span><br><span class="line">								CurrentState &lt;= S1;</span><br><span class="line">							<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">							waitTime := InitCmd(ptr).waitTime;</span><br><span class="line">							outLCM_DB &lt;= InitCmd(ptr).cmd;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">						<span class="keyword">when</span> S1 =&gt;</span><br><span class="line">							CurrentState &lt;= S2;</span><br><span class="line">							waitTime := InitCmd(ptr).waitTime;</span><br><span class="line">							outLCM_DB &lt;= InitCmd(ptr).cmd;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">						<span class="keyword">when</span> S2 =&gt;</span><br><span class="line">							CurrentState &lt;= S0;</span><br><span class="line">							waitTime := InitCmd(ptr).waitTime;</span><br><span class="line">							outLCM_DB &lt;= InitCmd(ptr).cmd;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							ptr := ptr + <span class="number">1</span>;</span><br><span class="line">						<span class="keyword">when</span> IDLE =&gt;</span><br><span class="line">							CurrentState &lt;= IDLE;</span><br><span class="line">						<span class="keyword">when</span> <span class="keyword">others</span> =&gt;</span><br><span class="line">							CurrentState &lt;= IDLE;</span><br><span class="line">					<span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">				<span class="keyword">when</span> <span class="number">1</span> =&gt; <span class="comment">-- WRITE CHAR</span></span><br><span class="line">					<span class="keyword">case</span> CurrentState <span class="keyword">is</span></span><br><span class="line">						<span class="keyword">when</span> S0 =&gt;</span><br><span class="line">							waitTime := <span class="number">360</span>;</span><br><span class="line">							CurrentState &lt;= S1;</span><br><span class="line">							outLCM_DB &lt;= inLCM_DB;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_isDone &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">						<span class="keyword">when</span> S1 =&gt;</span><br><span class="line">							CurrentState &lt;= S2;</span><br><span class="line">							outLCM_DB &lt;= inLCM_DB;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">						<span class="keyword">when</span> S2 =&gt;</span><br><span class="line">							CurrentState &lt;= IDLE;</span><br><span class="line">							outLCM_DB &lt;= inLCM_DB;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_isDone &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">						<span class="keyword">when</span> IDLE =&gt;</span><br><span class="line">							CurrentState &lt;= IDLE;</span><br><span class="line">						<span class="keyword">when</span> <span class="keyword">others</span> =&gt;</span><br><span class="line">							CurrentState &lt;= IDLE;</span><br><span class="line">					<span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">				<span class="keyword">when</span> <span class="number">2</span> =&gt; <span class="comment">-- SEND COMMAND</span></span><br><span class="line">					<span class="keyword">case</span> CurrentState <span class="keyword">is</span></span><br><span class="line">						<span class="keyword">when</span> S0 =&gt;</span><br><span class="line">							waitTime := <span class="number">80000</span>;</span><br><span class="line">							CurrentState &lt;= S1;</span><br><span class="line">							outLCM_DB &lt;= inLCM_DB;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">						<span class="keyword">when</span> S1 =&gt;</span><br><span class="line">							CurrentState &lt;= S2;</span><br><span class="line">							outLCM_DB &lt;= inLCM_DB;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">						<span class="keyword">when</span> S2 =&gt;</span><br><span class="line">							CurrentState &lt;= IDLE;</span><br><span class="line">							outLCM_DB &lt;= inLCM_DB;</span><br><span class="line">							outLCM_RS &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_RW &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_EN &lt;= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">							outLCM_isDone &lt;= <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">						<span class="keyword">when</span> IDLE =&gt;</span><br><span class="line">							CurrentState &lt;= IDLE;</span><br><span class="line">						<span class="keyword">when</span> <span class="keyword">others</span> =&gt;</span><br><span class="line">							CurrentState &lt;= IDLE;</span><br><span class="line">					<span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">				<span class="keyword">when</span> <span class="keyword">others</span> =&gt;</span><br><span class="line">					CurrentState &lt;= IDLE;</span><br><span class="line">			<span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line">		<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">	<span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">process</span>;</span><br><span class="line"><span class="keyword">end</span> arch ;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://blog.csdn.net/qq_36749906/article/details/107462149">Mermaid狀態機教學</a></li>
<li><a href="http://b2.hlvs.ylc.edu.tw/ezfiles/3/1003/img/106/20140421085729.pdf">LCD模組徹底研究</a></li>
<li>FPGA晶片設計實務 ISBN：978-986-430-399-1<br><a href="http://www.csd.nutn.edu.tw/DSE/CH9.pdf">http://www.csd.nutn.edu.tw/DSE/CH9.pdf</a><br><a href="http://www.hantronix.com/files/data/1278382423char-comm-b.pdf">http://www.hantronix.com/files/data/1278382423char-comm-b.pdf</a><br><a href="https://baike.baidu.com/item/CGROM/10134179">https://baike.baidu.com/item/CGROM/10134179</a></li>
</ul>
]]></content>
      <categories>
        <category>FPGA研究筆記</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>LCD顯示器</tag>
        <tag>VHDL</tag>
      </tags>
  </entry>
</search>
