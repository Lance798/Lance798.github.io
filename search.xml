<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arduino SCoop使用</title>
    <url>/2021/05/23/Arduino-SCoop%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="安裝程式庫"><a href="#安裝程式庫" class="headerlink" title="安裝程式庫"></a>安裝程式庫</h1><ol>
<li><p>去下載程式庫 <a href="https://github.com/fabriceo/SCoop">https://github.com/fabriceo/SCoop</a></p>
<p><img src="Download_ZIP.png" alt="Download_ZIP.png"></p>
</li>
<li><p>打開壓縮檔，把資料夾SCoop丟到路徑<strong>本機-&gt;文件-&gt;Arduino-&gt;libraries</strong></p>
<p><img src="SCoop_Folder.png" alt="SCoop_Folder.png"></p>
</li>
</ol>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>就一樣先匯入程式庫</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SCoop.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在<code>setup()</code>和<code>loop()</code>加一些東西</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mySCoop.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    yield();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用SCoop可以把要做的不同事當作Task，宣告是用<code>defineTask(名稱)</code>。</p>
<p>假設現在需要一個顯示七段的Task，命名為blinkTask，那宣告就像這樣</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">defineTask(blinkTask);</span><br></pre></td></tr></table></figure>

<p>然後每個Task都有自己的<code>setup()</code>和<code>loop()</code>，就跟原本的功能差不多，所以就把要同時處理的不同事放到不同Task的<code>loop()</code>裡就好</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blinkTask::setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    pinMode(LED_BUILTIN, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blinkTask::loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    digitalWrite(LED_BUILTIN, HIGH);</span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">    digitalWrite(LED_BUILTIN, LOW);</span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>sleep()</code>其實就是<code>delay()</code>的意思，只是用<code>delay()</code>的話用這就沒意義了，一樣會卡住。</p>
<p>有其他Task要做就直接加，一樣先做<code>defineTask()</code>然後再寫<code>setup()</code>和<code>loop()</code>就好</p>
<hr>
<p>完整程式碼</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SCoop.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">defineTask(blinkTask);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blinkTask::setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(LED_BUILTIN, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blinkTask::loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(LED_BUILTIN, HIGH);</span><br><span class="line">  sleep(<span class="number">1000</span>);</span><br><span class="line">  pinMode(LED_BUILTIN, LOW);</span><br><span class="line">  sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  mySCoop.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  yield();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Arduino</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>《FPGA研究筆記》簡易溫濕度計 (一) LCD顯示文字</title>
    <url>/2020/11/18/%E7%B0%A1%E6%98%93%E6%BA%AB%E6%BF%95%E5%BA%A6%E8%A8%88%20(%E4%B8%80)%20LCD%E9%A1%AF%E7%A4%BA%E6%96%87%E5%AD%97/</url>
    <content><![CDATA[<h1 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h1><p>這次的目標是讀取DHT11的數值，並且透過LCD來顯示溫溼度，來作成簡單的溫濕度計。</p>
<p>首先要先寫好LCD顯示文字的驅動。</p>
<h1 id="相關知識"><a href="#相關知識" class="headerlink" title="相關知識"></a>相關知識</h1><h2 id="LCD模組"><a href="#LCD模組" class="headerlink" title="LCD模組"></a>LCD模組</h2><p>這次使用的LCD型號是WG14432B5，可以顯示中文字，為繪圖型LCD。<br>寬度144畫素、高度32畫素。</p>
<h3 id="名詞說明"><a href="#名詞說明" class="headerlink" title="名詞說明"></a>名詞說明</h3><ul>
<li><strong>AC</strong> 位址計數</li>
<li><strong>BF</strong> 忙碌旗標</li>
<li><strong>DDRAM</strong> 顯示資料暫存器</li>
<li><strong>CGRAM</strong> 自定義字型暫存器</li>
<li><strong>HCGROM</strong> 半寬字型記憶體(ASCII)</li>
<li><strong>CGROM</strong> 中文字型記憶體(BIG-5)</li>
</ul>
<span id="more"></span>

<h3 id="重要接腳說明"><a href="#重要接腳說明" class="headerlink" title="重要接腳說明"></a>重要接腳說明</h3><p><img src="LCD_pinout.png" alt="LCD 接腳圖"></p>
<ol>
<li><strong>RS</strong>  暫存器選擇 和 <strong>RW</strong> 讀/寫控制選擇</li>
</ol>
<table>
<thead>
<tr>
<th align="center">RS</th>
<th align="center">RW</th>
<th align="center">簡介</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">寫入指令碼於指令暫存器。</td>
</tr>
<tr>
<td align="center">0</td>
<td align="center">1</td>
<td align="center">讀取BF(忙碌旗標)和AC(位址計數器)的內容。</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0</td>
<td align="center">將資料寫入DDRAM(資料暫存器)。</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">從DDRAM讀取資料。</td>
</tr>
<tr>
<td align="center">2. <strong>EN</strong> LCD致能接腳</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">輸入一正脈波(<strong>0 -&gt; 1 -&gt; 0</strong>)即可完成寫入資料。</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3. <strong>D0 ~ D7</strong> 資料匯流排</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">輸入指令碼</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="控制指令表"><a href="#控制指令表" class="headerlink" title="控制指令表"></a>控制指令表</h3><ul>
<li>基本指令(RE=0)</li>
</ul>
<img src="基本指令.png" alt="基本指令" style="zoom: 67%;" />

<ul>
<li>進階指令(RE=1)</li>
</ul>
<img src="延伸指令.png" alt="延伸指令" style="zoom:73%;" />

<h3 id="初始化流程"><a href="#初始化流程" class="headerlink" title="初始化流程"></a>初始化流程</h3><p><img src="InitChart.png" alt="初始化流程圖"></p>
<h1 id="設計架構"><a href="#設計架構" class="headerlink" title="設計架構"></a>設計架構</h1><h2 id="LCM-8位元控制器"><a href="#LCM-8位元控制器" class="headerlink" title="LCM 8位元控制器"></a>LCM 8位元控制器</h2><ul>
<li><h3 id="接腳圖"><a href="#接腳圖" class="headerlink" title="接腳圖"></a><strong>接腳圖</strong></h3><p><img src="LCM%E6%8E%A7%E5%88%B6%E5%99%A8%E6%8E%A5%E8%85%B3%E5%9C%96.png" alt="LCM控制器接腳圖"></p>
</li>
</ul>
<ul>
<li><h6 id="CLK"><a href="#CLK" class="headerlink" title="CLK"></a>CLK</h6><p>時脈輸入</p>
</li>
<li><h6 id="RESET"><a href="#RESET" class="headerlink" title="RESET"></a>RESET</h6><p>重置輸入</p>
</li>
<li><h6 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h6><p>顯示文字輸入，共10個中文字（一個中文字2 bytes，使用Big5編碼）和4位數字，共24 bytes。</p>
</li>
<li><h6 id="RS"><a href="#RS" class="headerlink" title="RS"></a>RS</h6><p>暫存器選擇輸出</p>
</li>
<li><h6 id="RW"><a href="#RW" class="headerlink" title="RW"></a>RW</h6><p>讀/寫控制選擇輸出</p>
</li>
<li><h6 id="EN"><a href="#EN" class="headerlink" title="EN"></a>EN</h6><p>致能輸出</p>
</li>
<li><h6 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h6><p>數據線輸出</p>
</li>
<li><h3 id="執行指令碼-輸入字元"><a href="#執行指令碼-輸入字元" class="headerlink" title="執行指令碼/輸入字元"></a><strong>執行指令碼/輸入字元</strong></h3></li>
</ul>
<ul>
<li><p>傳輸指令流程圖</p>
<p><img src="%E5%82%B3%E8%BC%B8%E6%8C%87%E4%BB%A4%E6%B5%81%E7%A8%8B.png" alt="傳輸指令流程"></p>
</li>
<li><p>部分程式碼</p>
</li>
</ul>
<h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><h1 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h1><p>-</p>
<h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul>
<li><a href="https://blog.csdn.net/qq_36749906/article/details/107462149">Mermaid狀態機教學</a></li>
<li><a href="http://b2.hlvs.ylc.edu.tw/ezfiles/3/1003/img/106/20140421085729.pdf">LCD模組徹底研究</a></li>
<li>FPGA晶片設計實務 ISBN：978-986-430-399-1<br><a href="http://www.csd.nutn.edu.tw/DSE/CH9.pdf">http://www.csd.nutn.edu.tw/DSE/CH9.pdf</a><br><a href="http://www.hantronix.com/files/data/1278382423char-comm-b.pdf">http://www.hantronix.com/files/data/1278382423char-comm-b.pdf</a><br><a href="https://baike.baidu.com/item/CGROM/10134179">https://baike.baidu.com/item/CGROM/10134179</a></li>
</ul>
]]></content>
      <categories>
        <category>FPGA研究筆記</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
        <tag>DHT11</tag>
        <tag>LCD</tag>
        <tag>Verilog</tag>
      </tags>
  </entry>
</search>
